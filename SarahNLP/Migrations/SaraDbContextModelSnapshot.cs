// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SarahNLP.Models;

namespace SarahNLP.Migrations
{
    [DbContext(typeof(SaraDbContext))]
    partial class SaraDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SarahNLP.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Craeted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.ToTable("Messages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Message");
                });

            modelBuilder.Entity("SarahNLP.Models.SmsMessage", b =>
                {
                    b.Property<int>("SmsMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SmsMessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("SmsMessages");
                });

            modelBuilder.Entity("SarahNLP.Models.ToneScore", b =>
                {
                    b.Property<int>("ToneScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<int?>("SmsMessageId")
                        .HasColumnType("int");

                    b.Property<string>("ToneName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToneType")
                        .HasColumnType("int");

                    b.HasKey("ToneScoreId");

                    b.HasIndex("MessageId");

                    b.HasIndex("SmsMessageId");

                    b.ToTable("ToneScores");
                });

            modelBuilder.Entity("SarahNLP.Models.ContentMessage", b =>
                {
                    b.HasBaseType("SarahNLP.Models.Message");

                    b.Property<string>("ContentText")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ContentMessage");
                });

            modelBuilder.Entity("SarahNLP.Models.SmsThread", b =>
                {
                    b.HasBaseType("SarahNLP.Models.Message");

                    b.HasDiscriminator().HasValue("SmsThread");
                });

            modelBuilder.Entity("SarahNLP.Models.SmsMessage", b =>
                {
                    b.HasOne("SarahNLP.Models.SmsThread", "SmsThread")
                        .WithMany("SmsMessages")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SarahNLP.Models.ToneScore", b =>
                {
                    b.HasOne("SarahNLP.Models.Message", "Message")
                        .WithMany("ToneScores")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SarahNLP.Models.SmsMessage", "SmsMessage")
                        .WithMany("ToneScores")
                        .HasForeignKey("SmsMessageId");
                });
#pragma warning restore 612, 618
        }
    }
}
